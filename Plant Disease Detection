{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":182633,"sourceType":"datasetVersion","datasetId":78313}],"dockerImageVersionId":30038,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Importing necessary libraries","metadata":{}},{"cell_type":"code","source":"!pip install torchsummary","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:11.961266Z","iopub.execute_input":"2024-05-01T15:30:11.961640Z","iopub.status.idle":"2024-05-01T15:30:21.032814Z","shell.execute_reply.started":"2024-05-01T15:30:11.961607Z","shell.execute_reply":"2024-05-01T15:30:21.031751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os                       # for working with files\nimport numpy as np              # for numerical computationss\nimport pandas as pd             # for working with dataframes\nimport torch                    # Pytorch module \nimport matplotlib.pyplot as plt # for plotting informations on graph and images using tensors\nimport torch.nn as nn           # for creating  neural networks\nfrom torch.utils.data import DataLoader # for dataloaders \nfrom PIL import Image           # for checking images\nimport torch.nn.functional as F # for functions for calculating loss\nimport torchvision.transforms as transforms   # for transforming images into tensors \nfrom torchvision.utils import make_grid       # for data checking\nfrom torchvision.datasets import ImageFolder  # for working with classes and images\nfrom torchsummary import summary              # for getting the summary of our model\nimport timeit\n\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:21.034805Z","iopub.execute_input":"2024-05-01T15:30:21.035090Z","iopub.status.idle":"2024-05-01T15:30:22.496377Z","shell.execute_reply.started":"2024-05-01T15:30:21.035061Z","shell.execute_reply":"2024-05-01T15:30:22.495445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#  Exploring the data ","metadata":{}},{"cell_type":"code","source":"# Define the directories\ndata_dir = \"../input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)\"\ntrain_dir = data_dir + \"/train\"\nvalid_dir = data_dir + \"/valid\"\ndiseases = os.listdir(train_dir)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.497617Z","iopub.execute_input":"2024-05-01T15:30:22.497887Z","iopub.status.idle":"2024-05-01T15:30:22.513488Z","shell.execute_reply.started":"2024-05-01T15:30:22.497861Z","shell.execute_reply":"2024-05-01T15:30:22.512915Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#List Diseases\nprint(diseases)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.514486Z","iopub.execute_input":"2024-05-01T15:30:22.514754Z","iopub.status.idle":"2024-05-01T15:30:22.518471Z","shell.execute_reply.started":"2024-05-01T15:30:22.514727Z","shell.execute_reply":"2024-05-01T15:30:22.517659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Total disease classes are: {}\".format(len(diseases)))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.521903Z","iopub.execute_input":"2024-05-01T15:30:22.522189Z","iopub.status.idle":"2024-05-01T15:30:22.527644Z","shell.execute_reply.started":"2024-05-01T15:30:22.522163Z","shell.execute_reply":"2024-05-01T15:30:22.526868Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate unique plants and diseases\nplants = []\nNumberOfDiseases = 0\nfor plant in diseases:\n    if plant.split('___')[0] not in plants:\n        plants.append(plant.split('___')[0])\n    if plant.split('___')[1] != 'healthy':\n        NumberOfDiseases += 1","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.531440Z","iopub.execute_input":"2024-05-01T15:30:22.531866Z","iopub.status.idle":"2024-05-01T15:30:22.537901Z","shell.execute_reply.started":"2024-05-01T15:30:22.531832Z","shell.execute_reply":"2024-05-01T15:30:22.536896Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Unique Plants are: \\n{plants}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.539116Z","iopub.execute_input":"2024-05-01T15:30:22.539457Z","iopub.status.idle":"2024-05-01T15:30:22.547733Z","shell.execute_reply.started":"2024-05-01T15:30:22.539422Z","shell.execute_reply":"2024-05-01T15:30:22.546686Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Number of plants: {}\".format(len(plants)))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.549133Z","iopub.execute_input":"2024-05-01T15:30:22.549539Z","iopub.status.idle":"2024-05-01T15:30:22.557008Z","shell.execute_reply.started":"2024-05-01T15:30:22.549493Z","shell.execute_reply":"2024-05-01T15:30:22.555999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Number of diseases: {}\".format(NumberOfDiseases))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.558373Z","iopub.execute_input":"2024-05-01T15:30:22.558691Z","iopub.status.idle":"2024-05-01T15:30:22.566602Z","shell.execute_reply.started":"2024-05-01T15:30:22.558652Z","shell.execute_reply":"2024-05-01T15:30:22.565665Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Count images for each class\nnums = {}\nfor disease in diseases:\n    nums[disease] = len(os.listdir(train_dir + '/' + disease))\n\nimg_per_class = pd.DataFrame(nums.values(), index=nums.keys(), columns=[\"no. of images\"])\nimg_per_class","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:22.567865Z","iopub.execute_input":"2024-05-01T15:30:22.568174Z","iopub.status.idle":"2024-05-01T15:30:29.148640Z","shell.execute_reply.started":"2024-05-01T15:30:22.568143Z","shell.execute_reply":"2024-05-01T15:30:29.147386Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the number of images per class\nindex = [n for n in range(38)]\nplt.figure(figsize=(20, 5))\nplt.bar(index, [n for n in nums.values()], width=0.3)\nplt.xlabel('Plants/Diseases', fontsize=10)\nplt.ylabel('No of images available', fontsize=10)\nplt.xticks(index, diseases, fontsize=5, rotation=90)\nplt.title('Images per each class of plant disease')","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:29.150178Z","iopub.execute_input":"2024-05-01T15:30:29.150635Z","iopub.status.idle":"2024-05-01T15:30:29.576638Z","shell.execute_reply.started":"2024-05-01T15:30:29.150589Z","shell.execute_reply":"2024-05-01T15:30:29.575836Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate total number of images for training\nn_train = 0\nfor value in nums.values():\n    n_train += value\nprint(f\"There are {n_train} images for training\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:29.577884Z","iopub.execute_input":"2024-05-01T15:30:29.578154Z","iopub.status.idle":"2024-05-01T15:30:29.583270Z","shell.execute_reply.started":"2024-05-01T15:30:29.578125Z","shell.execute_reply":"2024-05-01T15:30:29.582415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create datasets\ntrain = ImageFolder(train_dir, transform=transforms.ToTensor())\nvalid = ImageFolder(valid_dir, transform=transforms.ToTensor()) ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:30:29.584475Z","iopub.execute_input":"2024-05-01T15:30:29.584879Z","iopub.status.idle":"2024-05-01T15:31:31.462348Z","shell.execute_reply.started":"2024-05-01T15:30:29.584828Z","shell.execute_reply":"2024-05-01T15:31:31.460167Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(train.classes)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:31.464629Z","iopub.execute_input":"2024-05-01T15:31:31.465863Z","iopub.status.idle":"2024-05-01T15:31:31.473130Z","shell.execute_reply.started":"2024-05-01T15:31:31.465803Z","shell.execute_reply":"2024-05-01T15:31:31.471826Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define function to show image\ndef show_image(image, label):\n    print(\"Label :\" + train.classes[label] + \"(\" + str(label) + \")\")\n    plt.imshow(image.permute(1, 2, 0))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:31.475044Z","iopub.execute_input":"2024-05-01T15:31:31.475844Z","iopub.status.idle":"2024-05-01T15:31:31.483442Z","shell.execute_reply.started":"2024-05-01T15:31:31.475790Z","shell.execute_reply":"2024-05-01T15:31:31.482328Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display a few images from the training set\nshow_image(*train[0])","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:31.485379Z","iopub.execute_input":"2024-05-01T15:31:31.485778Z","iopub.status.idle":"2024-05-01T15:31:31.780522Z","shell.execute_reply.started":"2024-05-01T15:31:31.485728Z","shell.execute_reply":"2024-05-01T15:31:31.779809Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_image(*train[70000])","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:31.781995Z","iopub.execute_input":"2024-05-01T15:31:31.782285Z","iopub.status.idle":"2024-05-01T15:31:32.074510Z","shell.execute_reply.started":"2024-05-01T15:31:31.782255Z","shell.execute_reply":"2024-05-01T15:31:32.073622Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_image(*train[30000])","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:32.076304Z","iopub.execute_input":"2024-05-01T15:31:32.076703Z","iopub.status.idle":"2024-05-01T15:31:32.284212Z","shell.execute_reply.started":"2024-05-01T15:31:32.076655Z","shell.execute_reply":"2024-05-01T15:31:32.279880Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Seed for reproducibility\nrandom_seed = 7\ntorch.manual_seed(random_seed)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:32.285718Z","iopub.execute_input":"2024-05-01T15:31:32.286024Z","iopub.status.idle":"2024-05-01T15:31:32.294247Z","shell.execute_reply.started":"2024-05-01T15:31:32.285994Z","shell.execute_reply":"2024-05-01T15:31:32.293174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data loader settings\n# setting the batch size\nbatch_size = 32","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:32.296009Z","iopub.execute_input":"2024-05-01T15:31:32.296346Z","iopub.status.idle":"2024-05-01T15:31:32.300778Z","shell.execute_reply.started":"2024-05-01T15:31:32.296313Z","shell.execute_reply":"2024-05-01T15:31:32.299898Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize data loaders\ntrain_dl = DataLoader(train, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nvalid_dl = DataLoader(valid, batch_size, num_workers=2, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:32.302375Z","iopub.execute_input":"2024-05-01T15:31:32.302957Z","iopub.status.idle":"2024-05-01T15:31:32.309286Z","shell.execute_reply.started":"2024-05-01T15:31:32.302912Z","shell.execute_reply":"2024-05-01T15:31:32.308269Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to show a batch of images\ndef show_batch(data):\n    for images, labels in data:\n        fig, ax = plt.subplots(figsize=(30, 30))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=8).permute(1, 2, 0))\n        break","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:32.311025Z","iopub.execute_input":"2024-05-01T15:31:32.311393Z","iopub.status.idle":"2024-05-01T15:31:32.318764Z","shell.execute_reply.started":"2024-05-01T15:31:32.311332Z","shell.execute_reply":"2024-05-01T15:31:32.317626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_batch(train_dl) ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:32.320133Z","iopub.execute_input":"2024-05-01T15:31:32.320452Z","iopub.status.idle":"2024-05-01T15:31:39.176934Z","shell.execute_reply.started":"2024-05-01T15:31:32.320394Z","shell.execute_reply":"2024-05-01T15:31:39.175899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#  Modelling ","metadata":{}},{"cell_type":"code","source":"#move data to GPU (if available)\ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available:\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n\n#to move data to the device (CPU or GPU)\ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n#to load onto the device (GPU if there is another CPU)\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl:\n            yield to_device(b, self.device)\n        \n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.178542Z","iopub.execute_input":"2024-05-01T15:31:39.178938Z","iopub.status.idle":"2024-05-01T15:31:39.190336Z","shell.execute_reply.started":"2024-05-01T15:31:39.178899Z","shell.execute_reply":"2024-05-01T15:31:39.189348Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"device = get_default_device()\ndevice","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.192097Z","iopub.execute_input":"2024-05-01T15:31:39.192418Z","iopub.status.idle":"2024-05-01T15:31:39.206064Z","shell.execute_reply.started":"2024-05-01T15:31:39.192385Z","shell.execute_reply":"2024-05-01T15:31:39.204738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Update the data loaders\ntrain_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(valid_dl, device)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.207768Z","iopub.execute_input":"2024-05-01T15:31:39.208107Z","iopub.status.idle":"2024-05-01T15:31:39.213096Z","shell.execute_reply.started":"2024-05-01T15:31:39.208073Z","shell.execute_reply":"2024-05-01T15:31:39.211995Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the neural network model\nclass SimpleResidualBlock(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu1 = nn.ReLU()\n        self.conv2 = nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3, stride=1, padding=1)\n        self.relu2 = nn.ReLU()\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.relu1(out)\n        out = self.conv2(out)\n        return self.relu2(out) + x # ReLU can be applied before or after adding the input","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.214609Z","iopub.execute_input":"2024-05-01T15:31:39.214963Z","iopub.status.idle":"2024-05-01T15:31:39.225812Z","shell.execute_reply.started":"2024-05-01T15:31:39.214924Z","shell.execute_reply":"2024-05-01T15:31:39.224833Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define accuracy function\ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() / len(preds))\n\n\n# Define base class for image classification models\nclass ImageClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)                   # Generate prediction\n        loss = F.cross_entropy(out, labels)  # Calculate loss\n        acc = accuracy(out, labels)          # Calculate accuracy\n        return {\"val_loss\": loss.detach(), \"val_accuracy\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x[\"val_loss\"] for x in outputs]\n        batch_accuracy = [x[\"val_accuracy\"] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()       # Combine loss  \n        epoch_accuracy = torch.stack(batch_accuracy).mean()\n        return {\"val_loss\": epoch_loss, \"val_accuracy\": epoch_accuracy} # Combine accuracies\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_accuracy']))\n        ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.227862Z","iopub.execute_input":"2024-05-01T15:31:39.228248Z","iopub.status.idle":"2024-05-01T15:31:39.247215Z","shell.execute_reply.started":"2024-05-01T15:31:39.228210Z","shell.execute_reply":"2024-05-01T15:31:39.246061Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define convolutional block\ndef ConvBlock(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),\n             nn.BatchNorm2d(out_channels),\n             nn.ReLU(inplace=True)]\n    if pool:\n        layers.append(nn.MaxPool2d(4))\n    return nn.Sequential(*layers)\n\n# Define ResNet9 model\nclass ResNet9(ImageClassificationBase):\n    def __init__(self, in_channels, num_diseases):\n        super().__init__()\n        \n        self.conv1 = ConvBlock(in_channels, 64)\n        self.conv2 = ConvBlock(64, 128, pool=True) # out_dim : 128 x 64 x 64 \n        self.res1 = nn.Sequential(ConvBlock(128, 128), ConvBlock(128, 128))\n        \n        self.conv3 = ConvBlock(128, 256, pool=True) # out_dim : 256 x 16 x 16\n        self.conv4 = ConvBlock(256, 512, pool=True) # out_dim : 512 x 4 x 44\n        self.res2 = nn.Sequential(ConvBlock(512, 512), ConvBlock(512, 512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4),\n                                       nn.Flatten(),\n                                       nn.Linear(512, num_diseases))\n        \n    def forward(self, xb): # xb is the loaded batch\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out        ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.248428Z","iopub.execute_input":"2024-05-01T15:31:39.248753Z","iopub.status.idle":"2024-05-01T15:31:39.264863Z","shell.execute_reply.started":"2024-05-01T15:31:39.248722Z","shell.execute_reply":"2024-05-01T15:31:39.264063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize the model\nmodel = to_device(ResNet9(3, len(train.classes)), device) \nmodel","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.266026Z","iopub.execute_input":"2024-05-01T15:31:39.266347Z","iopub.status.idle":"2024-05-01T15:31:39.343739Z","shell.execute_reply.started":"2024-05-01T15:31:39.266316Z","shell.execute_reply":"2024-05-01T15:31:39.343008Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# print summary\nINPUT_SHAPE = (3, 256, 256)\nprint(summary(model.cuda(), (INPUT_SHAPE)))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:39.345020Z","iopub.execute_input":"2024-05-01T15:31:39.345315Z","iopub.status.idle":"2024-05-01T15:31:40.066159Z","shell.execute_reply.started":"2024-05-01T15:31:39.345284Z","shell.execute_reply":"2024-05-01T15:31:40.065361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#  Training the model ","metadata":{}},{"cell_type":"code","source":"# for training\n@torch.no_grad()\n# Evaluation function\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\n# Function to get learning rate\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n    \n# Training function\ndef fit_OneCycle(epochs, max_lr, model, train_loader, val_loader, weight_decay=0,\n                grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, steps_per_epoch=len(train_loader))\n    \n    \n    for epoch in range(epochs):\n        # Training\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            lrs.append(get_lr(optimizer))\n            sched.step()\n            \n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n        \n    return history","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:40.073934Z","iopub.execute_input":"2024-05-01T15:31:40.074214Z","iopub.status.idle":"2024-05-01T15:31:40.089353Z","shell.execute_reply.started":"2024-05-01T15:31:40.074184Z","shell.execute_reply":"2024-05-01T15:31:40.088395Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate model initially\n%time\nhistory = [evaluate(model, valid_dl)]\nhistory","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:31:40.091438Z","iopub.execute_input":"2024-05-01T15:31:40.091890Z","iopub.status.idle":"2024-05-01T15:32:49.522109Z","shell.execute_reply.started":"2024-05-01T15:31:40.091843Z","shell.execute_reply":"2024-05-01T15:32:49.521197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define hyperparameters and train the model\nepochs = 5\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:32:49.523514Z","iopub.execute_input":"2024-05-01T15:32:49.523805Z","iopub.status.idle":"2024-05-01T15:32:49.528484Z","shell.execute_reply.started":"2024-05-01T15:32:49.523775Z","shell.execute_reply":"2024-05-01T15:32:49.527751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the model\n%time\nhistory += fit_OneCycle(epochs, max_lr, model, train_dl, valid_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=1e-4, \n                             opt_func=opt_func)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:32:49.529754Z","iopub.execute_input":"2024-05-01T15:32:49.530023Z","iopub.status.idle":"2024-05-01T16:59:41.198381Z","shell.execute_reply.started":"2024-05-01T15:32:49.529996Z","shell.execute_reply":"2024-05-01T16:59:41.197093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plotting functions\ndef plot_accuracies(history):\n    accuracies = [x['val_accuracy'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n\ndef plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');\n    \ndef plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.231763Z","iopub.execute_input":"2024-05-01T16:59:41.232190Z","iopub.status.idle":"2024-05-01T16:59:41.243529Z","shell.execute_reply.started":"2024-05-01T16:59:41.232141Z","shell.execute_reply":"2024-05-01T16:59:41.242713Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot results\nplot_accuracies(history)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.244991Z","iopub.execute_input":"2024-05-01T16:59:41.245363Z","iopub.status.idle":"2024-05-01T16:59:41.410349Z","shell.execute_reply.started":"2024-05-01T16:59:41.245329Z","shell.execute_reply":"2024-05-01T16:59:41.409496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_losses(history)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.411826Z","iopub.execute_input":"2024-05-01T16:59:41.412147Z","iopub.status.idle":"2024-05-01T16:59:41.593951Z","shell.execute_reply.started":"2024-05-01T16:59:41.412117Z","shell.execute_reply":"2024-05-01T16:59:41.593128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Learning Rate overtime","metadata":{}},{"cell_type":"code","source":"plot_lrs(history)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.595515Z","iopub.execute_input":"2024-05-01T16:59:41.595852Z","iopub.status.idle":"2024-05-01T16:59:41.744746Z","shell.execute_reply.started":"2024-05-01T16:59:41.595822Z","shell.execute_reply":"2024-05-01T16:59:41.743964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test dataset directory\ntest_dir = \"../input/new-plant-diseases-dataset/test\"\ntest = ImageFolder(test_dir, transform=transforms.ToTensor())","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.746275Z","iopub.execute_input":"2024-05-01T16:59:41.746695Z","iopub.status.idle":"2024-05-01T16:59:41.770866Z","shell.execute_reply.started":"2024-05-01T16:59:41.746652Z","shell.execute_reply":"2024-05-01T16:59:41.770189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_images = sorted(os.listdir(test_dir + '/test'))\ntest_images","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.772058Z","iopub.execute_input":"2024-05-01T16:59:41.772424Z","iopub.status.idle":"2024-05-01T16:59:41.780420Z","shell.execute_reply.started":"2024-05-01T16:59:41.772382Z","shell.execute_reply":"2024-05-01T16:59:41.779429Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to predict an image's class\ndef predict_image(img, model):\n    \"\"\"Converts image to array and return the predicted class\n        with highest probability\"\"\"\n    xb = to_device(img.unsqueeze(0), device)\n    yb = model(xb)\n    _, preds  = torch.max(yb, dim=1)\n\n    return train.classes[preds[0].item()]","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.782240Z","iopub.execute_input":"2024-05-01T16:59:41.782700Z","iopub.status.idle":"2024-05-01T16:59:41.789721Z","shell.execute_reply.started":"2024-05-01T16:59:41.782655Z","shell.execute_reply":"2024-05-01T16:59:41.788618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate and print predictions on test images\nimg, label = test[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[0], ', Predicted:', predict_image(img, model))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.791190Z","iopub.execute_input":"2024-05-01T16:59:41.791595Z","iopub.status.idle":"2024-05-01T16:59:41.968862Z","shell.execute_reply.started":"2024-05-01T16:59:41.791549Z","shell.execute_reply":"2024-05-01T16:59:41.967896Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i, (img, label) in enumerate(test):\n    print('Label:', test_images[i], ', Predicted:', predict_image(img, model))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:41.970326Z","iopub.execute_input":"2024-05-01T16:59:41.970750Z","iopub.status.idle":"2024-05-01T16:59:42.387019Z","shell.execute_reply.started":"2024-05-01T16:59:41.970689Z","shell.execute_reply":"2024-05-01T16:59:42.386190Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to calculate and print model accuracy on the test dataset\ndef calculate_and_print_model_accuracy(model, test_dl):\n    model.eval()\n    correct_predictions = 0\n    total_predictions = 0\n    \n    # Iterate through the test DataLoader\n    with torch.no_grad():\n        for images, labels in test_dl:\n            # Move the images and labels to the device\n            images, labels = to_device((images, labels), device)\n            # Get the model predictions\n            outputs = model(images)\n            # Find the predicted classes\n            _, preds = torch.max(outputs, 1)\n            # Calculate the total predictions and correct predictions\n            total_predictions += labels.size(0)\n            correct_predictions += (preds == labels).sum().item()\n    \n    # Calculate accuracy as a percentage\n    accuracy = (correct_predictions / total_predictions) * 100\n    # Print the accuracy score\n    print(f\"Model Accuracy on Test Dataset: {accuracy:.2f}%\")\n\n# Define the DataLoader for the test dataset\ntest_dl = DataLoader(test, batch_size=32, num_workers=2, pin_memory=True)\n\n# Calculate and print model accuracy on the test dataset\ncalculate_and_print_model_accuracy(model, test_dl)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:42.388352Z","iopub.execute_input":"2024-05-01T16:59:42.388726Z","iopub.status.idle":"2024-05-01T16:59:42.786901Z","shell.execute_reply.started":"2024-05-01T16:59:42.388694Z","shell.execute_reply":"2024-05-01T16:59:42.785863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save the model\nPATH = './plant-disease-model.pth'  \ntorch.save(model.state_dict(), PATH)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:42.788265Z","iopub.execute_input":"2024-05-01T16:59:42.788655Z","iopub.status.idle":"2024-05-01T16:59:42.874179Z","shell.execute_reply.started":"2024-05-01T16:59:42.788555Z","shell.execute_reply":"2024-05-01T16:59:42.873299Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"PATH = './plant-disease-model-complete.pth'\ntorch.save(model, PATH)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:59:42.875386Z","iopub.execute_input":"2024-05-01T16:59:42.875734Z","iopub.status.idle":"2024-05-01T16:59:42.935046Z","shell.execute_reply.started":"2024-05-01T16:59:42.875699Z","shell.execute_reply":"2024-05-01T16:59:42.934347Z"},"trusted":true},"execution_count":null,"outputs":[]}]}